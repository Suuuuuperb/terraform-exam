import "tfconfig/v2" as tfconfig
import "strings"
import "types"

# Initialize array of regions found in AWS providers
region_values = []

# Allowed Regions
allowed_regions = "ap-northeast-1"

print ("tfconfig.provider : ", tfconfig.providers)
print ("tfconfig.variables : ", tfconfig.variables)

if ((length(tfconfig.providers) else 0) > 0) {
  provider = tfconfig.providers
  if "aws" in keys(providers) {
    aws = tfconfig.providers.aws
    aliases = aws["alias"]
    for aliases as alias, data {
      print ("data : ", data)
      # region = data["references"]["region"]
      # if region matches "\\$\\{var\\.(.*)\\}" {

      # }
    }
  }
}

# Iterate through all AWS providers in root module
# if ((length(tfconfig.providers) else 0) > 0) {
#   providers = tfconfig.providers
#   if "aws" in keys(providers) {
#     aws = tfconfig.providers.aws
#     aliases = aws["alias"]
#     for aliases as alias, data {
#       print ( "alias is: ", alias )
#       region = data["references"]["region"]
#       print("region : ", region)
#       print ("region[0] : ", region[0])
#     	if region[0] matches "\\$\\{var\\.(.*)\\}" {
#           AWS provider was configured with variable
#       	  print ( "region is a variable" )
#       	  region_variable = strings.trim_suffix(strings.trim_prefix(region, "${var."), "}")
#       	  print ( "region variable is: ", region_variable )
#       	  print ( "Value of region is: ", tfplan.variables[region_variable] )
#       	  region_value = tfplan.variables[region_variable]
#           region_values += [region_value]
#     	} else {
#             print ( "region is a hard-coded value" )
#       	    print ( "Value of region is: ", region[0] )
#       	    region_value = region
#             region_values += [region_value]
#     	}
#      }
#   }
# }

# Print all regions found in AWS providers
print ( "region_values is: ", region_values )

aws_region_valid = rule {
  all region_values as rv {
    rv in allowed_regions
  }
}

main = rule {
  (aws_region_valid) else true
}